version: '3'

services:
  kong:
    image: 'gd-kong-gateway'
    networks:
      - gd-network
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: warn
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
    restart: always

    ports:
      - "8001:8001"
      - "8444:8444"
      - "8000:8000"
      - "8443:8443"
      - "9080:9080"
      - "9081:9081"

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always

    networks:
      - gd-network

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '29092:29092'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    depends_on:
      - zookeeper
    restart: always

    networks:
      - gd-network

  notification-db:
    image: 'postgres'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
    volumes:
      - ./gd-notification-ms/db:/docker-entrypoint-initdb.d
    restart: always

    networks:
      - gd-network

  queue-db:
    image: "redis"
    ports:
      - "6379:6379"
    restart: always

    networks:
      - gd-network

  mongo-store:
    image: "mongo"
    ports:
      - "27017:27017"
    restart: always

    networks:
      - gd-network

  notification-ms:
    image: 'gd-notification-ms'
    ports:
      - '3000:3010'
      - "9101:9101"
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_HOST: "notification-db"
      POSTGRES_DBNAME: "gd-notification-ms"
      KAFKA_URL: "kafka:9092"
      KAFKA_TOPIC: "notification"
    restart: always

    depends_on:
      - notification-db
    networks:
      - gd-network

  telemessenger-ms:
    image: "gd-telemessenger-ms"
    ports:
      - "3001:3001"
      - "9102:9102"
    environment:
      TELEGRAM_BOT_KEY: '6440570082:AAEydONrrATMun4ccOeCDcTe6YyShNVq_zs'
      MONGO_CONN_URI: 'mongodb://mongo-store:27017'
      MONGO_DB_NAME: 'users'
      MONGO_COLL_NAME: 'telegram_subscribers'
      KAFKA_URL: "kafka:9092"
    restart: always

    depends_on:
      - mongo-store
    networks:
      - gd-network

  queue-ms:
    image: "gd-queue-ms"
    ports:
      - "3002:3002"
      - "9100:9100"
    environment:
      REDIS_URL: "redis://queue-db:6379"
    restart: always

    depends_on:
      - queue-db
    networks:
      - gd-network

  join-queue-cms:
    image: "gd-join-queue-cms"
    ports:
      - "3003:3003"
    restart: always

    environment:
      GPRC_SERVER_QUEUE: "queue-ms:3002"
      GPRC_SERVER_NOTIFICATION: "notification-ms:3000"
      KAFKA_URL: "kafka:9092"
      KAFKA_TOPIC: "logs"
    depends_on:
      - queue-ms
      - notification-ms
    networks:
      - gd-network

  user-ms:
    image: "gd-users-ms"
    ports:
      - "3005:3005"
    restart: always

    #    volumes:
    #        - ./gd-users-ms/db/migrations:/app/db/migrations
    #        - ./gd-users-ms/scripts:/app/scripts
    environment:
      DB_PASSWORD: "postgres"
      DB_USER: "postgres"
      DB_HOST: "user-db"
      DB_NAME: "users_ms"
    depends_on:
      - user-db
    networks:
      - gd-network

  user-db:
    image: "postgres"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "users_ms"
    volumes:
      - ./gd-users-ms/db:/docker-entrypoint-initdb.d
    restart: always

    networks:
      - gd-network

  gym-avail-ms:
    image: "gd-gym-avail-ms"
    ports:
      - "3006:3006"
    #    volumes:
    #        - ./gd-avail-ms/db/migrations:/app/db/migrations
    #        - ./gd-avail-ms/scripts:/app/scripts
    environment:
      DB_PASSWORD: "postgres"
      DB_USER: "postgres"
      DB_HOST: "gym-avail-db"
      DB_NAME: "gym_avail_ms"
      GRPC_SERVER_QUEUE: "queue-ms:3002"
      GRPC_SERVER_NOTIFICATION: "notification-ms:3000"
    depends_on:
      - gym-avail-db
    restart: always

    networks:
      - gd-network

  gym-avail-db:
    image: "postgres"
    ports:
      - "5434:5432"
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "gym_avail_ms"
    volumes:
      - ./gd-avail-ms/db:/docker-entrypoint-initdb.d
    restart: always

    networks:
      - gd-network

  booking-ms:
    image: "gd-booking-ms"
    ports:
      - "6000:6000"
      - "9103:9103"
    environment:
      POSTGRES_HOST: "booking-db"
      POSTGRES_DB: "gd_booking_ms"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    command: [ "postgres", "-c", "shared_preload_libraries=uuid-ossp" ]
    depends_on:
      - booking-db
    restart: always

    networks:
      - gd-network

  createbooking-cms:
    image: "gd-createbooking-cms"
    ports:
      - "5002:5002"
    environment:
      FLASK_CLASS_SERVER: "classes-ms:5200"
      BOOKING_GRPC_SERVER: "booking-ms:6000"
      NOTIFICATION_GRPC_SERVER: "notification-ms:3000"
    depends_on:
      - booking-ms
      - classes-ms
      - notification-ms
    restart: always

    networks:
      - gd-network

  booking-db:
    image: "postgres"
    ports:
      - "5435:5432"
    environment:
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "gd_booking_ms"
    volumes:
      - ./gd-booking-ms/db:/docker-entrypoint-initdb.d
    restart: always

    networks:
      - gd-network

  classes-ms:
    image: "gd-classes-ms"
    ports:
      - "5200:5200"
    environment:
      dbURL: "mysql+mysqlconnector://root:rootpassword@classes-db:3306/classes_db"
    depends_on:
      - classes-db
    restart: always

    networks:
      - gd-network

  classes-db:
    image: "mysql"
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "rootpassword"
      MYSQL_DATABASE: "classes"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "password"
    volumes:
      - ./gd-classes-ms/docker:/docker-entrypoint-initdb.d
    restart: always

    networks:
      - gd-network
      



  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    hostname: cadvisor
    platform: linux/aarch64
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    ports:
      - "8080:8080"
    networks:
      - gd-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./gd-monitoring-infra/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - gd-network

  grafana:
    image: grafana/grafana
    environment: 
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_SIGNOUT_MENU: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    volumes:
      - "./gd-monitoring-infra/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "grafana-data:/var/lib/grafana"
      - "./gd-monitoring-infra/dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./gd-monitoring-infra/default.yml:/etc/grafana/provisioning/dashboards/default.yml"
    ports:
      - "3010:3000"
    networks:
      - gd-network

networks:
  gd-network:
    driver: bridge

volumes:
  grafana-data: