// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: queue/queue_service.proto

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueService_JoinQueue_FullMethodName          = "/queue.QueueService/JoinQueue"
	QueueService_RetrieveNext_FullMethodName       = "/queue.QueueService/RetrieveNext"
	QueueService_GetUpcomingTickets_FullMethodName = "/queue.QueueService/GetUpcomingTickets"
)

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	JoinQueue(ctx context.Context, in *JoinQueueRequest, opts ...grpc.CallOption) (*JoinQueueResponse, error)
	RetrieveNext(ctx context.Context, in *RetrieveNextRequest, opts ...grpc.CallOption) (*RetrieveNextResponse, error)
	GetUpcomingTickets(ctx context.Context, in *GetUpcomingTicketsRequest, opts ...grpc.CallOption) (*GetUpcomingTicketsResponse, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) JoinQueue(ctx context.Context, in *JoinQueueRequest, opts ...grpc.CallOption) (*JoinQueueResponse, error) {
	out := new(JoinQueueResponse)
	err := c.cc.Invoke(ctx, QueueService_JoinQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) RetrieveNext(ctx context.Context, in *RetrieveNextRequest, opts ...grpc.CallOption) (*RetrieveNextResponse, error) {
	out := new(RetrieveNextResponse)
	err := c.cc.Invoke(ctx, QueueService_RetrieveNext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) GetUpcomingTickets(ctx context.Context, in *GetUpcomingTicketsRequest, opts ...grpc.CallOption) (*GetUpcomingTicketsResponse, error) {
	out := new(GetUpcomingTicketsResponse)
	err := c.cc.Invoke(ctx, QueueService_GetUpcomingTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	JoinQueue(context.Context, *JoinQueueRequest) (*JoinQueueResponse, error)
	RetrieveNext(context.Context, *RetrieveNextRequest) (*RetrieveNextResponse, error)
	GetUpcomingTickets(context.Context, *GetUpcomingTicketsRequest) (*GetUpcomingTicketsResponse, error)
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) JoinQueue(context.Context, *JoinQueueRequest) (*JoinQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinQueue not implemented")
}
func (UnimplementedQueueServiceServer) RetrieveNext(context.Context, *RetrieveNextRequest) (*RetrieveNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNext not implemented")
}
func (UnimplementedQueueServiceServer) GetUpcomingTickets(context.Context, *GetUpcomingTicketsRequest) (*GetUpcomingTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingTickets not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_JoinQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).JoinQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_JoinQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).JoinQueue(ctx, req.(*JoinQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_RetrieveNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).RetrieveNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_RetrieveNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).RetrieveNext(ctx, req.(*RetrieveNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_GetUpcomingTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).GetUpcomingTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueService_GetUpcomingTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).GetUpcomingTickets(ctx, req.(*GetUpcomingTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queue.QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinQueue",
			Handler:    _QueueService_JoinQueue_Handler,
		},
		{
			MethodName: "RetrieveNext",
			Handler:    _QueueService_RetrieveNext_Handler,
		},
		{
			MethodName: "GetUpcomingTickets",
			Handler:    _QueueService_GetUpcomingTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue/queue_service.proto",
}
